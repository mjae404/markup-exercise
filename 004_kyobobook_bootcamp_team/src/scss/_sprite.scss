// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$new-tab-white-name: 'new-tab-white';
$new-tab-white-x: 0px;
$new-tab-white-y: 0px;
$new-tab-white-offset-x: 0px;
$new-tab-white-offset-y: 0px;
$new-tab-white-width: 10px;
$new-tab-white-height: 10px;
$new-tab-white-total-width: 25px;
$new-tab-white-total-height: 10px;
$new-tab-white-image: '../sprite/sprite.png';
$new-tab-white: (0px, 0px, 0px, 0px, 10px, 10px, 25px, 10px, '../sprite/sprite.png', 'new-tab-white', );
$new-tab-name: 'new-tab';
$new-tab-x: 15px;
$new-tab-y: 0px;
$new-tab-offset-x: -15px;
$new-tab-offset-y: 0px;
$new-tab-width: 10px;
$new-tab-height: 10px;
$new-tab-total-width: 25px;
$new-tab-total-height: 10px;
$new-tab-image: '../sprite/sprite.png';
$new-tab: (15px, 0px, -15px, 0px, 10px, 10px, 25px, 10px, '../sprite/sprite.png', 'new-tab', );
$new-tab-2x-name: 'new-tab-2x';
$new-tab-2x-x: 0px;
$new-tab-2x-y: 0px;
$new-tab-2x-offset-x: 0px;
$new-tab-2x-offset-y: 0px;
$new-tab-2x-width: 20px;
$new-tab-2x-height: 20px;
$new-tab-2x-total-width: 50px;
$new-tab-2x-total-height: 20px;
$new-tab-2x-image: '../sprite/sprite-2x.png';
$new-tab-2x: (0px, 0px, 0px, 0px, 20px, 20px, 50px, 20px, '../sprite/sprite-2x.png', 'new-tab-2x', );
$new-tab-white-2x-name: 'new-tab-white-2x';
$new-tab-white-2x-x: 30px;
$new-tab-white-2x-y: 0px;
$new-tab-white-2x-offset-x: -30px;
$new-tab-white-2x-offset-y: 0px;
$new-tab-white-2x-width: 20px;
$new-tab-white-2x-height: 20px;
$new-tab-white-2x-total-width: 50px;
$new-tab-white-2x-total-height: 20px;
$new-tab-white-2x-image: '../sprite/sprite-2x.png';
$new-tab-white-2x: (30px, 0px, -30px, 0px, 20px, 20px, 50px, 20px, '../sprite/sprite-2x.png', 'new-tab-white-2x', );
$spritesheet-width: 25px;
$spritesheet-height: 10px;
$spritesheet-image: '../sprite/sprite.png';
$spritesheet-sprites: ($new-tab-white, $new-tab, );
$spritesheet: (25px, 10px, '../sprite/sprite.png', $spritesheet-sprites, );
$retina-spritesheet-width: 50px;
$retina-spritesheet-height: 20px;
$retina-spritesheet-image: '../sprite/sprite-2x.png';
$retina-spritesheet-sprites: ($new-tab-2x, $new-tab-white-2x, );
$retina-spritesheet: (50px, 20px, '../sprite/sprite-2x.png', $retina-spritesheet-sprites, );

// These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.
//
// The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
$new-tab-white-group-name: 'new-tab-white';
$new-tab-white-group: ('new-tab-white', $new-tab-white, $new-tab-2x, );
$new-tab-group-name: 'new-tab';
$new-tab-group: ('new-tab', $new-tab, $new-tab-white-2x, );
$retina-groups: ($new-tab-white-group, $new-tab-group, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
//   It should be used with a "retina group" variable.
//
// The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/
//
// $icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );
//
// .icon-home {
//   @include retina-sprite($icon-home-group);
// }
@mixin sprite-background-size($sprite) {
  $sprite-total-width: nth($sprite, 7);
  $sprite-total-height: nth($sprite, 8);
  background-size: $sprite-total-width $sprite-total-height;
}

@mixin retina-sprite($retina-group) {
  $normal-sprite: nth($retina-group, 2);
  $retina-sprite: nth($retina-group, 3);
  @include sprite($normal-sprite);

  @media (-webkit-min-device-pixel-ratio: 2),
         (min-resolution: 192dpi) {
    @include sprite-image($retina-sprite);
    @include sprite-background-size($normal-sprite);
  }
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}

// The `retina-sprites` mixin generates a CSS rule and media query for retina groups
//   This yields the same output as CSS retina template but can be overridden in SCSS
//
// @include retina-sprites($retina-groups);
@mixin retina-sprites($retina-groups) {
  @each $retina-group in $retina-groups {
    $sprite-name: nth($retina-group, 1);
    .#{$sprite-name} {
      @include retina-sprite($retina-group);
    }
  }
}
